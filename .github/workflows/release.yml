# Release Management - Automated Releases with Release Please
name: Release

on:
  push:
    branches: [main]

permissions:
  contents: write
  pull-requests: write
  issues: write # For labels
  id-token: write # For attestations
  attestations: write
  checks: write
  pages: write # For GitHub Pages

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false # Don't cancel releases

jobs:
  release-please:
    name: Release Please
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      releases_created: ${{ steps.release.outputs.releases_created }}
      tag_name: ${{ steps.release.outputs.tag_name }}
      version: ${{ steps.release.outputs.version }}
    steps:
      - uses: googleapis/release-please-action@v4
        id: release
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          release-type: python
          include-component-in-tag: false
          
      - name: Debug Release Please outputs
        run: |
          echo "Releases created: '${{ steps.release.outputs.releases_created }}'"
          echo "Tag name: '${{ steps.release.outputs.tag_name }}'"
          echo "Version: '${{ steps.release.outputs.version }}'"

  publish:
    name: Build & Publish Release
    needs: release-please
    if: ${{ needs.release-please.outputs.releases_created == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 15
    environment: release
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup environment
        uses: ./.github/actions/setup-environment

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            .venv
          key: ${{ runner.os }}-python-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-python-

      - name: Run health check
        run: make health-check

      - name: Extract coverage percentage
        id: coverage
        continue-on-error: true
        run: |
          if [ -f coverage.xml ]; then
            COVERAGE=$(python -c "
          import xml.etree.ElementTree as ET
          try:
              tree = ET.parse('coverage.xml')
              root = tree.getroot()
              line_rate = float(root.attrib['line-rate'])
              print(f'{line_rate * 100:.0f}')
          except:
              print('0')
          ")
            echo "line-rate=$COVERAGE" >> $GITHUB_OUTPUT
            echo "Coverage percentage: $COVERAGE%"
          else
            echo "line-rate=0" >> $GITHUB_OUTPUT
            echo "Coverage file not found"
          fi

      - name: Update coverage badge
        continue-on-error: true
        uses: schneegans/dynamic-badges-action@v1.7.0
        with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: ${{ secrets.GIST_ID }}
          filename: wyrestorm-networkhd-ha-coverage.json
          label: coverage
          message: ${{ steps.coverage.outputs.line-rate || 'N/A' }}%
          valColorRange: ${{ steps.coverage.outputs.line-rate || '0' }}
          maxColorRange: 100
          minColorRange: 0
          namedLogo: pytest

      - name: Update version in manifest.json
        run: |
          VERSION="${{ needs.release-please.outputs.version }}"
          
          # Update manifest.json
          jq --arg version "$VERSION" '.version = $version' \
            custom_components/wyrestorm_networkhd/manifest.json > manifest.tmp
          mv manifest.tmp custom_components/wyrestorm_networkhd/manifest.json

      - name: Create release zip
        run: |
          # Create HACS-compatible zip (files at root level)
          cd custom_components/wyrestorm_networkhd
          zip -r ../../wyrestorm_networkhd.zip . \
            -x "*.pyc" \
            -x "*__pycache__*" \
            -x "*.DS_Store" \
            -x ".DS_Store" \
            -x "._*" \
            -x "*_version.py"
          cd ../..
          
          # Also create a full bundle
          zip -r wyrestorm-networkhd-ha.zip \
            custom_components/wyrestorm_networkhd/ \
            README.md \
            hacs.json \
            LICENSE \
            -x "*.pyc" \
            -x "*__pycache__*" \
            -x "*.DS_Store" \
            -x "*/.DS_Store" \
            -x "*/._*" \
            -x "*_version.py"

      - name: Upload release assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.release-please.outputs.tag_name }}
          files: |
            wyrestorm_networkhd.zip
            wyrestorm-networkhd-ha.zip
            coverage.xml
          fail_on_unmatched_files: false

      - name: Attest build artifacts
        continue-on-error: true
        uses: actions/attest-build-provenance@v3
        with:
          subject-path: "*.zip"

  hacs-validation:
    name: HACS Post-Release Validation
    needs: [release-please, publish]
    if: ${{ needs.release-please.outputs.releases_created == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          ref: ${{ needs.release-please.outputs.tag_name }}

      - name: HACS validation
        continue-on-error: true
        uses: hacs/action@main
        with:
          category: "integration"

      - name: Hassfest validation
        continue-on-error: true
        uses: home-assistant/actions/hassfest@master