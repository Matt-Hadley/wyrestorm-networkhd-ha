[build-system]
requires = ["setuptools>=80.9.0", "setuptools-scm>=8.1.0"]
build-backend = "setuptools.build_meta"

[project]
name = "wyrestorm-networkhd-ha"
dynamic = ["version"]
description = "Home Assistant integration for WyreStorm NetworkHD matrix switching and device control"
requires-python = ">=3.11"
dependencies = [
    "voluptuous>=0.13.0",
    "wyrestorm-networkhd>=2.1.0",
]
keywords = [
    "wyrestorm",
    "networkhd",
    "home-assistant",
    "matrix",
    "switching",
    "video",
    "hdmi",
    "av",
    "control",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: End Users/Desktop",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Home Automation",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Hardware",
    "Topic :: System :: Networking",
    "Topic :: Multimedia :: Video",
]

[tool.setuptools]
packages = ["custom_components.wyrestorm_networkhd"]

[project.optional-dependencies]
dev = [
    "ruff>=0.12.0",
    "pytest>=8.0.0",
    "pytest-cov>=6.0.0",
    "pytest-asyncio>=1.0.0",
    "pytest-mock>=3.12.0",
    "bandit[toml]>=1.7.0",
    "pip-audit>=2.6.0",
    "mypy>=1.8.0",
    "pre-commit>=3.6.0",
    "vulture>=2.1.4",
    "setuptools-scm>=8.1.0",
    "homeassistant>=2024.12.0",
]

[tool.setuptools_scm]
write_to = "custom_components/wyrestorm_networkhd/_version.py"
tag_regex = "^v(?P<version>[^\\+]+)(?:\\+(?P<local>.*))?$"
git_describe_command = [
    "git",
    "describe",
    "--dirty",
    "--tags",
    "--long",
    "--match",
    "v*",
]

# Ruff configuration - replaces Black, isort, and Flake8
[tool.ruff]
line-length = 120
target-version = "py311"
exclude = [
    ".git",
    ".venv",
    "venv",
    "__pycache__",
    "htmlcov",
    ".pytest_cache",
    "custom_components/wyrestorm_networkhd/_version.py",
]

# Ruff formatter configuration (replaces Black)
[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # Pyflakes
    "I",   # isort (import sorting)
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
]

# Ruff import sorting configuration (replaces isort)
[tool.ruff.lint.isort]
combine-as-imports = true
force-wrap-aliases = true
known-first-party = ["custom_components.wyrestorm_networkhd"]

# Pytest configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=custom_components/wyrestorm_networkhd",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
    "--durations=10",
    "--tb=short",
]
markers = [
    "unit: marks tests as unit tests (deselect with '-m \"not unit\"')",
    "integration: marks tests as integration tests (deselect with '-m \"not integration\"')",
    "performance: marks tests as performance tests (deselect with '-m \"not performance\"')",
    "asyncio: marks tests as async tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["custom_components/wyrestorm_networkhd"]
omit = [
    "tests/*",
    "*/tests/*",
    "*/__pycache__/*",
    "*/site-packages/*",
    "custom_components/wyrestorm_networkhd/_version.py",
]

[tool.coverage.html]
directory = "htmlcov"

# Bandit security linter configuration
[tool.bandit]
exclude_dirs = ["tests", "htmlcov", ".venv", "venv"]

# Mypy configuration
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_unreachable = true
strict_optional = true
no_implicit_reexport = true
show_error_codes = true
namespace_packages = true
explicit_package_bases = true
exclude = [
    ".venv",
    "venv",
    ".git",
    "__pycache__",
    "htmlcov",
    ".pytest_cache",
    "build",
    "dist",
]
# Additional mypy options to handle external dependencies
ignore_missing_imports = true
# Exclude specific problematic modules
[[tool.mypy.overrides]]
module = "homeassistant.*"
ignore_missing_imports = true
